# def exibir_mensagem():
#     print("Olá mundo!")


# def exibir_mensagem_2(nome):
#     print(f"Seja bem vindo {nome}!")


# def exibir_mensagem_3(nome="Anônimo"):
#     print(f"Seja bem vindo {nome}!")


# # exibir_mensagem()
# # exibir_mensagem_2(nome="Guilherme")
# exibir_mensagem_3()
# exibir_mensagem_3(nome="Chappie")


def calcular (numero):
    antecessor = numero - 1
    sucessor = numero +1
    print (f'O antecessor do numero {numero} é {antecessor} é o sucesssor é {sucessor}')

calcular(100)

def antecessor_sucessor (numero):
    antecessor = numero - 1
    sucessor = numero + 1
    return antecessor , sucessor


print (antecessor_sucessor(98))

def calcular_total(numeros):
    return sum(numeros)


def retorna_antecessor_e_sucessor(numero):
    antecessor = numero - 1
    sucessor = numero + 1

    return antecessor, sucessor


# print(calcular_total([10, 20, 34]))  # 64
# print(retorna_antecessor_e_sucessor(10))  # (9, 11)


# def salvar_carro(marca, modelo, ano, placa):
#     # salva carro no banco de dados...
#     print(f"Carro inserido com sucesso! {marca}/{modelo}/{ano}/{placa}")


# salvar_carro("Fiat", "Palio", 1999, "ABC-1234")
# salvar_carro(marca="Fiat", modelo="Palio", ano=1999, placa="ABC-1234")
# salvar_carro(**{"marca": "Fiat", "modelo": "Palio", "ano": 1999, "placa": "ABC-1234"})


#------------*args, **kwargs ------------#


# def exibir_poema(data_extenso, *args, **kwargs):
#     texto = "\n".join(args)
#     meta_dados = "\n".join([f"{chave.title()}: {valor}" for chave, valor in kwargs.items()])
#     mensagem = f"{data_extenso}\n\n{texto}\n\n{meta_dados}"
#     print(mensagem)


# exibir_poema(
#     "terça-feira , 18 de março de 2025.",#data_extenso
#     "Zen of Python",
#     "Beautiful is better than ugly.",
#     "Explicit is better than implicit.",
#     "Simple is better than complex.",
#     "Complex is better than complicated.",
#     "Flat is better than nested.",
#     "Sparse is better than dense.",
#     "Readability counts.",
#     "Special cases aren't special enough to break the rules.",
#     "Although practicality beats purity.",
#     "Errors should never pass silently.",
#     "Unless explicitly silenced.",
#     "In the face of ambiguity, refuse the temptation to guess.",
#     "There should be one-- and preferably only one --obvious way to do it.",
#     "Although that way may not be obvious at first unless you're Dutch.",
#     "Now is better than never.",
#     "Although never is often better than *right* now.",
#     "If the implementation is hard to explain, it's a bad idea.",
#     "If the implementation is easy to explain, it may be a good idea.",
#     "Namespaces are one honking great idea -- let's do more of those!", #Args separado por , 
#     autor="Tim Peters", #Kwargs chave +valores 
#     ano=1999,#Kwargs chave +valores 
# )





# def exibir_poema(data_extenso, *lista, **dicionario):
#     texto = "\n".join(lista)
#     meta_dados = "\n".join([f"{chave.title()}: {valor}" for chave, valor in dicionario.items()])
#     mensagem = f"{data_extenso}\n\n{texto}\n\n{meta_dados}"
#     print(mensagem)


# exibir_poema(
#     "terça-feira , 18 de março de 2025.",#data_extenso
#     "No dia mais claro",
#     "na noite mais densa",
#     "O mal sucumbirá ante minha presença",
#     "Todo aquele que venera o mal há de penar",
#     "Quando o poder do lanterna verde enfrentar!",
#     autor="Sara Vieira", #Kwargs chave +valores 
#     ano=2025,#Kwargs chave +valores 
# )


#------------ Somente por posição  ------------#


# def criar_carro(modelo, ano, placa, /, marca, motor, combustivel):
#     print(modelo, ano, placa, marca, motor, combustivel)


# #criar_carro("Palio", 1999, "ABC-1234", marca="Fiat", motor="1.0", combustivel="Gasolina")
# criar_carro("Palio", 1999, "ABC-1234")
# #criar_carro(modelo="Palio", ano=1999, placa="ABC-1234", marca="Fiat", motor="1.0", combustivel="Gasolina")  # inválido


#------------ Keyword only- Somente nome  ------------#

# def criar_carro(modelo, ano, placa, /, *, marca, motor, combustivel):
#     print(modelo, ano, placa, marca, motor, combustivel)

# criar_carro("Palio", 1999, "ABC-1234", marca="Fiat", motor="1.0", combustivel="Gasolina")
# #criar_carro(modelo="Palio", ano=1999, placa="ABC-1234", marca="Fiat", motor="1.0", combustivel="Gasolina")  # inválido


#------------ Keyword only and positional only  ------------#
# POr posição usa a barra e por nome usa o * para forçar 

#------------ Objetos de primeira classe  ------------#

# print (f'#-------Calculadora em Python---------#')

# def somar(a, b):
#     return a + b

# def subtrair (a,b):
#     return a - b

# def multiplicacao(a,b):
#     return a * b

# def divisao(a,b):
#     return a / b


# def exibir_resultado(a, b, funcao):
#     resultado = funcao(a, b)
#     print(f"O resultado da operação é = {resultado}")



# exibir_resultado(50, 10, somar)  # O resultado da operação 50 + 10 = 20
# exibir_resultado(50, 10, subtrair)  # O resultado da operação 50 - 10 = 40
# exibir_resultado(50, 10, multiplicacao)  # O resultado da operação 50 * 10 = 500
# exibir_resultado(50, 10,  divisao)   # O resultado da operação 50 / 10 = 5

# op=somar
# print (f'A soma de a+b é : ',{op(50,10)})

#------------ Escopo local e global  ------------#
# Tudo que e feito dentro do escopo da função e local. 

# salario=2000

# def salario_bonus(bonus):
#     global salario
#     salario += bonus
#     return salario
# salario_com_bonus = salario_bonus (1000)
# print (salario_com_bonus)


# def lista_numeros (lista):
#     print(numero)
# numero = [1,2,3] 
# numero.append(4)
# lista_numeros(numero)


# def lista_numeros (lista):
#     print(numero)
# numero = [1,2,3] 
# numero_aux = numero.copy()
# numero_aux.append(4)
# print(f'Lista original é {numero}')
# print(f'lista aux = {numero_aux}')
# #lista_numeros(numero)

 